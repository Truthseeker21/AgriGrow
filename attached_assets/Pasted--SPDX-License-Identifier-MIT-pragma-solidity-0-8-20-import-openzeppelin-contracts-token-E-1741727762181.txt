// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol";
import "@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol";
import "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol";
import "@aave/core-v3/contracts/interfaces/IPool.sol";
import "@aave/core-v3/contracts/interfaces/IPoolAddressesProvider.sol";
import "@aave/core-v3/contracts/flashloan/interfaces/IFlashLoanReceiver.sol";

contract SecureMEVBot is IFlashLoanReceiver, Ownable {
    using SafeERC20 for IERC20;
    
    address private constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;
    address private constant UNISWAP_ROUTER = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;
    address private constant SUSHISWAP_ROUTER = 0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F;
    address private constant AAVE_LENDING_POOL = 0x7d2768dE32b0B80B7A3454c06BdACfcd1D84cFd6;
    address private constant AAVE_ADDRESSES_PROVIDER = 0x2f39d218133AFaB8F2B819B1066c7E434Ad94E9e;

    uint256 public constant SLIPPAGE_TOLERANCE = 50; // 0.5%
    
    event ArbitrageExecuted(address indexed token, uint256 profit);
    event FlashLoanReceived(address indexed asset, uint256 amount);

    constructor() Ownable(msg.sender) {}

    receive() external payable {}

    // Implement required IFlashLoanReceiver interface functions
    function ADDRESSES_PROVIDER() external view returns (IPoolAddressesProvider) {
        return IPoolAddressesProvider(AAVE_ADDRESSES_PROVIDER);
    }

    function POOL() external view returns (IPool) {
        return IPool(AAVE_LENDING_POOL);
    }

    function executeArbitrage(address token, uint256 amount) external onlyOwner {
        address[] memory assets = new address[](1);
        assets[0] = token;
        
        uint256[] memory amounts = new uint256[](1);
        amounts[0] = amount;
        
        uint256[] memory modes = new uint256[](1);
        modes[0] = 0;

        bytes memory params = abi.encode(msg.sender);
        
        IPool(AAVE_LENDING_POOL).flashLoan(
            address(this),
            assets,
            amounts,
            modes,
            address(this),
            params,
            0
        );
    }

    function executeOperation(
        address[] calldata assets,
        uint256[] calldata amounts,
        uint256[] calldata premiums,
        address initiator,
        bytes calldata params
    ) external override returns (bool) {
        require(msg.sender == AAVE_LENDING_POOL, "Unauthorized");
        require(initiator == owner(), "Unauthorized initiator");
        require(assets.length == 1, "Multiple assets not supported");

        address token = assets[0];
        uint256 amount = amounts[0];
        uint256 premium = premiums[0];

        emit FlashLoanReceived(token, amount);

        // Calculate minimum amounts with slippage protection
        uint256 uniPrice = getPriceOnUniswap(token, amount);
        uint256 sushiPrice = getPriceOnSushiSwap(token, amount);
        
        require(uniPrice > sushiPrice, "No arbitrage opportunity");
        uint256 minAmountOut = (uniPrice * (1000 - SLIPPAGE_TOLERANCE)) / 1000;

        // Execute arbitrage
        IERC20(token).approve(UNISWAP_ROUTER, amount);
        
        address[] memory pathUni = new address[](2);
        pathUni[0] = token;
        pathUni[1] = WETH;
        
        // Swap on Uniswap
        uint256[] memory uniAmounts = IUniswapV2Router02(UNISWAP_ROUTER).swapExactTokensForETH(
            amount,
            minAmountOut,
            pathUni,
            address(this),
            block.timestamp
        );
        
        // Convert ETH to WETH
        (bool success,) = WETH.call{value: uniAmounts[1]}("");
        require(success, "ETH to WETH conversion failed");
        
        // Swap back on Sushiswap
        IERC20(WETH).approve(SUSHISWAP_ROUTER, uniAmounts[1]);
        
        address[] memory pathSushi = new address[](2);
        pathSushi[0] = WETH;
        pathSushi[1] = token;
        
        uint256 minReturn = (amount + premium) * (1000 + SLIPPAGE_TOLERANCE) / 1000;
        
        uint256[] memory sushiAmounts = IUniswapV2Router02(SUSHISWAP_ROUTER).swapExactTokensForTokens(
            uniAmounts[1],
            minReturn,
            pathSushi,
            address(this),
            block.timestamp
        );

        // Calculate and verify profit
        uint256 totalDebt = amount + premium;
        require(sushiAmounts[1] >= totalDebt, "Insufficient repayment");
        uint256 profit = sushiAmounts[1] - totalDebt;

        // Repay flash loan
        IERC20(token).approve(AAVE_LENDING_POOL, totalDebt);
        
        emit ArbitrageExecuted(token, profit);
        return true;
    }

    function getPriceOnUniswap(address token, uint256 amount) public view returns (uint256) {
        address[] memory path = new address[](2);
        path[0] = token;
        path[1] = WETH;
        return IUniswapV2Router02(UNISWAP_ROUTER).getAmountsOut(amount, path)[1];
    }

    function getPriceOnSushiSwap(address token, uint256 amount) public view returns (uint256) {
        address[] memory path = new address[](2);
        path[0] = token;
        path[1] = WETH;
        return IUniswapV2Router02(SUSHISWAP_ROUTER).getAmountsOut(amount, path)[1];
    }

    // Emergency withdrawal functions
    function withdrawETH() external onlyOwner {
        payable(owner()).transfer(address(this).balance);
    }

    function withdrawToken(address token) external onlyOwner {
        IERC20(token).safeTransfer(owner(), IERC20(token).balanceOf(address(this)));
    }
}