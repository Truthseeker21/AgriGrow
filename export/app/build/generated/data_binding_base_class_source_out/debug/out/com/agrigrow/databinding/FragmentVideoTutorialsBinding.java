// Generated by view binder compiler. Do not edit!
package com.agrigrow.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ProgressBar;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.cardview.widget.CardView;
import androidx.coordinatorlayout.widget.CoordinatorLayout;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.agrigrow.R;
import com.google.android.material.chip.Chip;
import com.google.android.material.chip.ChipGroup;
import com.google.android.material.tabs.TabLayout;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentVideoTutorialsBinding implements ViewBinding {
  @NonNull
  private final CoordinatorLayout rootView;

  @NonNull
  public final Button btnClearFilters;

  @NonNull
  public final CardView cardFeaturedVideo;

  @NonNull
  public final Chip chipAdvanced;

  @NonNull
  public final Chip chipAllVideos;

  @NonNull
  public final Chip chipBeginner;

  @NonNull
  public final Chip chipFavorites;

  @NonNull
  public final ChipGroup chipGroupFilter;

  @NonNull
  public final Chip chipIntermediate;

  @NonNull
  public final Chip chipWatched;

  @NonNull
  public final EditText etSearchVideos;

  @NonNull
  public final ImageView ivFeaturedThumbnail;

  @NonNull
  public final LinearLayout layoutEmptyState;

  @NonNull
  public final ProgressBar progressLoading;

  @NonNull
  public final RecyclerView recyclerVideos;

  @NonNull
  public final TabLayout tabLayoutCategories;

  @NonNull
  public final TextView tvEmptyStateMessage;

  @NonNull
  public final TextView tvFeaturedDescription;

  @NonNull
  public final TextView tvFeaturedTitle;

  @NonNull
  public final TextView tvVideosHeader;

  @NonNull
  public final TextView tvVideosListTitle;

  @NonNull
  public final TextView tvVideosSubheader;

  private FragmentVideoTutorialsBinding(@NonNull CoordinatorLayout rootView,
      @NonNull Button btnClearFilters, @NonNull CardView cardFeaturedVideo,
      @NonNull Chip chipAdvanced, @NonNull Chip chipAllVideos, @NonNull Chip chipBeginner,
      @NonNull Chip chipFavorites, @NonNull ChipGroup chipGroupFilter,
      @NonNull Chip chipIntermediate, @NonNull Chip chipWatched, @NonNull EditText etSearchVideos,
      @NonNull ImageView ivFeaturedThumbnail, @NonNull LinearLayout layoutEmptyState,
      @NonNull ProgressBar progressLoading, @NonNull RecyclerView recyclerVideos,
      @NonNull TabLayout tabLayoutCategories, @NonNull TextView tvEmptyStateMessage,
      @NonNull TextView tvFeaturedDescription, @NonNull TextView tvFeaturedTitle,
      @NonNull TextView tvVideosHeader, @NonNull TextView tvVideosListTitle,
      @NonNull TextView tvVideosSubheader) {
    this.rootView = rootView;
    this.btnClearFilters = btnClearFilters;
    this.cardFeaturedVideo = cardFeaturedVideo;
    this.chipAdvanced = chipAdvanced;
    this.chipAllVideos = chipAllVideos;
    this.chipBeginner = chipBeginner;
    this.chipFavorites = chipFavorites;
    this.chipGroupFilter = chipGroupFilter;
    this.chipIntermediate = chipIntermediate;
    this.chipWatched = chipWatched;
    this.etSearchVideos = etSearchVideos;
    this.ivFeaturedThumbnail = ivFeaturedThumbnail;
    this.layoutEmptyState = layoutEmptyState;
    this.progressLoading = progressLoading;
    this.recyclerVideos = recyclerVideos;
    this.tabLayoutCategories = tabLayoutCategories;
    this.tvEmptyStateMessage = tvEmptyStateMessage;
    this.tvFeaturedDescription = tvFeaturedDescription;
    this.tvFeaturedTitle = tvFeaturedTitle;
    this.tvVideosHeader = tvVideosHeader;
    this.tvVideosListTitle = tvVideosListTitle;
    this.tvVideosSubheader = tvVideosSubheader;
  }

  @Override
  @NonNull
  public CoordinatorLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentVideoTutorialsBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentVideoTutorialsBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_video_tutorials, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentVideoTutorialsBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.btn_clear_filters;
      Button btnClearFilters = ViewBindings.findChildViewById(rootView, id);
      if (btnClearFilters == null) {
        break missingId;
      }

      id = R.id.card_featured_video;
      CardView cardFeaturedVideo = ViewBindings.findChildViewById(rootView, id);
      if (cardFeaturedVideo == null) {
        break missingId;
      }

      id = R.id.chip_advanced;
      Chip chipAdvanced = ViewBindings.findChildViewById(rootView, id);
      if (chipAdvanced == null) {
        break missingId;
      }

      id = R.id.chip_all_videos;
      Chip chipAllVideos = ViewBindings.findChildViewById(rootView, id);
      if (chipAllVideos == null) {
        break missingId;
      }

      id = R.id.chip_beginner;
      Chip chipBeginner = ViewBindings.findChildViewById(rootView, id);
      if (chipBeginner == null) {
        break missingId;
      }

      id = R.id.chip_favorites;
      Chip chipFavorites = ViewBindings.findChildViewById(rootView, id);
      if (chipFavorites == null) {
        break missingId;
      }

      id = R.id.chip_group_filter;
      ChipGroup chipGroupFilter = ViewBindings.findChildViewById(rootView, id);
      if (chipGroupFilter == null) {
        break missingId;
      }

      id = R.id.chip_intermediate;
      Chip chipIntermediate = ViewBindings.findChildViewById(rootView, id);
      if (chipIntermediate == null) {
        break missingId;
      }

      id = R.id.chip_watched;
      Chip chipWatched = ViewBindings.findChildViewById(rootView, id);
      if (chipWatched == null) {
        break missingId;
      }

      id = R.id.et_search_videos;
      EditText etSearchVideos = ViewBindings.findChildViewById(rootView, id);
      if (etSearchVideos == null) {
        break missingId;
      }

      id = R.id.iv_featured_thumbnail;
      ImageView ivFeaturedThumbnail = ViewBindings.findChildViewById(rootView, id);
      if (ivFeaturedThumbnail == null) {
        break missingId;
      }

      id = R.id.layout_empty_state;
      LinearLayout layoutEmptyState = ViewBindings.findChildViewById(rootView, id);
      if (layoutEmptyState == null) {
        break missingId;
      }

      id = R.id.progress_loading;
      ProgressBar progressLoading = ViewBindings.findChildViewById(rootView, id);
      if (progressLoading == null) {
        break missingId;
      }

      id = R.id.recycler_videos;
      RecyclerView recyclerVideos = ViewBindings.findChildViewById(rootView, id);
      if (recyclerVideos == null) {
        break missingId;
      }

      id = R.id.tab_layout_categories;
      TabLayout tabLayoutCategories = ViewBindings.findChildViewById(rootView, id);
      if (tabLayoutCategories == null) {
        break missingId;
      }

      id = R.id.tv_empty_state_message;
      TextView tvEmptyStateMessage = ViewBindings.findChildViewById(rootView, id);
      if (tvEmptyStateMessage == null) {
        break missingId;
      }

      id = R.id.tv_featured_description;
      TextView tvFeaturedDescription = ViewBindings.findChildViewById(rootView, id);
      if (tvFeaturedDescription == null) {
        break missingId;
      }

      id = R.id.tv_featured_title;
      TextView tvFeaturedTitle = ViewBindings.findChildViewById(rootView, id);
      if (tvFeaturedTitle == null) {
        break missingId;
      }

      id = R.id.tv_videos_header;
      TextView tvVideosHeader = ViewBindings.findChildViewById(rootView, id);
      if (tvVideosHeader == null) {
        break missingId;
      }

      id = R.id.tv_videos_list_title;
      TextView tvVideosListTitle = ViewBindings.findChildViewById(rootView, id);
      if (tvVideosListTitle == null) {
        break missingId;
      }

      id = R.id.tv_videos_subheader;
      TextView tvVideosSubheader = ViewBindings.findChildViewById(rootView, id);
      if (tvVideosSubheader == null) {
        break missingId;
      }

      return new FragmentVideoTutorialsBinding((CoordinatorLayout) rootView, btnClearFilters,
          cardFeaturedVideo, chipAdvanced, chipAllVideos, chipBeginner, chipFavorites,
          chipGroupFilter, chipIntermediate, chipWatched, etSearchVideos, ivFeaturedThumbnail,
          layoutEmptyState, progressLoading, recyclerVideos, tabLayoutCategories,
          tvEmptyStateMessage, tvFeaturedDescription, tvFeaturedTitle, tvVideosHeader,
          tvVideosListTitle, tvVideosSubheader);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
