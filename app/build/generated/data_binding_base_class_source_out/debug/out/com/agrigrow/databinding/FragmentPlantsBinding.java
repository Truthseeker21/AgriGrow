// Generated by view binder compiler. Do not edit!
package com.agrigrow.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.HorizontalScrollView;
import android.widget.ProgressBar;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.SearchView;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.recyclerview.widget.RecyclerView;
import androidx.swiperefreshlayout.widget.SwipeRefreshLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.agrigrow.R;
import com.google.android.material.appbar.AppBarLayout;
import com.google.android.material.chip.Chip;
import com.google.android.material.chip.ChipGroup;
import com.google.android.material.floatingactionbutton.FloatingActionButton;
import com.google.android.material.tabs.TabLayout;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentPlantsBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final AppBarLayout appBarLayout;

  @NonNull
  public final HorizontalScrollView categoryScrollView;

  @NonNull
  public final Chip chipAll;

  @NonNull
  public final Chip chipFlowers;

  @NonNull
  public final Chip chipFruits;

  @NonNull
  public final ChipGroup chipGroupCategories;

  @NonNull
  public final Chip chipHerbs;

  @NonNull
  public final Chip chipIndoor;

  @NonNull
  public final Chip chipVegetables;

  @NonNull
  public final FloatingActionButton fabAddPlant;

  @NonNull
  public final ProgressBar progressBar;

  @NonNull
  public final RecyclerView recyclerViewPlants;

  @NonNull
  public final SearchView searchView;

  @NonNull
  public final SwipeRefreshLayout swipeRefreshLayout;

  @NonNull
  public final TabLayout tabLayout;

  @NonNull
  public final TextView textViewEmpty;

  @NonNull
  public final TextView textViewTitle;

  private FragmentPlantsBinding(@NonNull ConstraintLayout rootView,
      @NonNull AppBarLayout appBarLayout, @NonNull HorizontalScrollView categoryScrollView,
      @NonNull Chip chipAll, @NonNull Chip chipFlowers, @NonNull Chip chipFruits,
      @NonNull ChipGroup chipGroupCategories, @NonNull Chip chipHerbs, @NonNull Chip chipIndoor,
      @NonNull Chip chipVegetables, @NonNull FloatingActionButton fabAddPlant,
      @NonNull ProgressBar progressBar, @NonNull RecyclerView recyclerViewPlants,
      @NonNull SearchView searchView, @NonNull SwipeRefreshLayout swipeRefreshLayout,
      @NonNull TabLayout tabLayout, @NonNull TextView textViewEmpty,
      @NonNull TextView textViewTitle) {
    this.rootView = rootView;
    this.appBarLayout = appBarLayout;
    this.categoryScrollView = categoryScrollView;
    this.chipAll = chipAll;
    this.chipFlowers = chipFlowers;
    this.chipFruits = chipFruits;
    this.chipGroupCategories = chipGroupCategories;
    this.chipHerbs = chipHerbs;
    this.chipIndoor = chipIndoor;
    this.chipVegetables = chipVegetables;
    this.fabAddPlant = fabAddPlant;
    this.progressBar = progressBar;
    this.recyclerViewPlants = recyclerViewPlants;
    this.searchView = searchView;
    this.swipeRefreshLayout = swipeRefreshLayout;
    this.tabLayout = tabLayout;
    this.textViewEmpty = textViewEmpty;
    this.textViewTitle = textViewTitle;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentPlantsBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentPlantsBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_plants, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentPlantsBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.appBarLayout;
      AppBarLayout appBarLayout = ViewBindings.findChildViewById(rootView, id);
      if (appBarLayout == null) {
        break missingId;
      }

      id = R.id.categoryScrollView;
      HorizontalScrollView categoryScrollView = ViewBindings.findChildViewById(rootView, id);
      if (categoryScrollView == null) {
        break missingId;
      }

      id = R.id.chipAll;
      Chip chipAll = ViewBindings.findChildViewById(rootView, id);
      if (chipAll == null) {
        break missingId;
      }

      id = R.id.chipFlowers;
      Chip chipFlowers = ViewBindings.findChildViewById(rootView, id);
      if (chipFlowers == null) {
        break missingId;
      }

      id = R.id.chipFruits;
      Chip chipFruits = ViewBindings.findChildViewById(rootView, id);
      if (chipFruits == null) {
        break missingId;
      }

      id = R.id.chipGroupCategories;
      ChipGroup chipGroupCategories = ViewBindings.findChildViewById(rootView, id);
      if (chipGroupCategories == null) {
        break missingId;
      }

      id = R.id.chipHerbs;
      Chip chipHerbs = ViewBindings.findChildViewById(rootView, id);
      if (chipHerbs == null) {
        break missingId;
      }

      id = R.id.chipIndoor;
      Chip chipIndoor = ViewBindings.findChildViewById(rootView, id);
      if (chipIndoor == null) {
        break missingId;
      }

      id = R.id.chipVegetables;
      Chip chipVegetables = ViewBindings.findChildViewById(rootView, id);
      if (chipVegetables == null) {
        break missingId;
      }

      id = R.id.fabAddPlant;
      FloatingActionButton fabAddPlant = ViewBindings.findChildViewById(rootView, id);
      if (fabAddPlant == null) {
        break missingId;
      }

      id = R.id.progressBar;
      ProgressBar progressBar = ViewBindings.findChildViewById(rootView, id);
      if (progressBar == null) {
        break missingId;
      }

      id = R.id.recyclerViewPlants;
      RecyclerView recyclerViewPlants = ViewBindings.findChildViewById(rootView, id);
      if (recyclerViewPlants == null) {
        break missingId;
      }

      id = R.id.searchView;
      SearchView searchView = ViewBindings.findChildViewById(rootView, id);
      if (searchView == null) {
        break missingId;
      }

      id = R.id.swipeRefreshLayout;
      SwipeRefreshLayout swipeRefreshLayout = ViewBindings.findChildViewById(rootView, id);
      if (swipeRefreshLayout == null) {
        break missingId;
      }

      id = R.id.tabLayout;
      TabLayout tabLayout = ViewBindings.findChildViewById(rootView, id);
      if (tabLayout == null) {
        break missingId;
      }

      id = R.id.textViewEmpty;
      TextView textViewEmpty = ViewBindings.findChildViewById(rootView, id);
      if (textViewEmpty == null) {
        break missingId;
      }

      id = R.id.textViewTitle;
      TextView textViewTitle = ViewBindings.findChildViewById(rootView, id);
      if (textViewTitle == null) {
        break missingId;
      }

      return new FragmentPlantsBinding((ConstraintLayout) rootView, appBarLayout,
          categoryScrollView, chipAll, chipFlowers, chipFruits, chipGroupCategories, chipHerbs,
          chipIndoor, chipVegetables, fabAddPlant, progressBar, recyclerViewPlants, searchView,
          swipeRefreshLayout, tabLayout, textViewEmpty, textViewTitle);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
